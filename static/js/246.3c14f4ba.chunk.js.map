{"version":3,"file":"static/js/246.3c14f4ba.chunk.js","mappings":"4QAOaA,GAAOC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,mPAIK,SAAAE,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,UAAvB,IAKqB,SAAAC,GAAC,OAAIA,EAAEH,MAAMC,OAAOC,UAAnB,IAGpCE,EAAYP,EAAAA,GAAAA,MAAH,qEAKTQ,GAAaR,EAAAA,EAAAA,IAAOS,EAAAA,GAAPT,CAAH,sJAIW,SAAAE,GAAK,OAAIA,EAAMC,MAAMC,OAAOM,WAAvB,IACb,SAAAR,GAAK,OAAIA,EAAMC,MAAMC,OAAOM,WAAvB,IAGlBC,EAAeX,EAAAA,GAAAA,IAAH,mGAOZY,GAAeZ,EAAAA,EAAAA,IAAOa,EAAAA,GAAPb,CAAH,kFAGd,SAAAE,GAAK,OAAIA,EAAMC,MAAMC,OAAOU,KAAvB,IAGHC,EAAaf,EAAAA,GAAAA,OAAH,meAWD,SAAAM,GAAC,OAAIA,EAAEH,MAAMC,OAAOM,WAAnB,IAIC,SAAAJ,GAAC,OAAIA,EAAEH,MAAMC,OAAOC,UAAnB,IAGL,SAAAC,GAAC,OAAIA,EAAEH,MAAMC,OAAOC,UAAnB,I,oBC9DRW,EAAsB,CACjCC,SAAU,aACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVrB,MAAO,Q,4BCaHsB,EAAgBC,EAAAA,KAAaC,MAAM,CACvCC,KAAMF,EAAAA,KACHG,QACC,yHACA,qHAEDC,WACHC,OAAQL,EAAAA,KACLG,QACC,6EACA,gGAEDC,aAGQE,EAAc,WAEzB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAI7B,OACE,SAAC,KAAD,CAEEC,cAAe,CAAEV,KAAM,GAAIG,OAAQ,IACnCQ,iBAAkBd,EAClBe,SAAU,SAACC,EAAQC,GAGfP,EAASQ,MACP,SAAAC,GAAO,OACLA,EAAQhB,KAAKiB,sBACbJ,EAAOb,KAAKiB,mBAFP,IAMTC,EAAAA,GAAAA,MAAA,UACKL,EAAOb,KADZ,YD5DyB,2BC8DvBZ,IAIJiB,GAASc,EAAAA,EAAAA,KAAW,UAAKN,KAEzBC,EAAQM,YACT,EAvBH,UAyBE,UAACjD,EAAD,YACE,UAACQ,EAAD,YACE,UAACI,EAAD,YACE,SAAC,MAAD,CAAQsC,KAAK,OADf,WAIA,SAACzC,EAAD,CAAYoB,KAAK,UACjB,SAAChB,EAAD,CAAcgB,KAAK,OAAOsB,UAAU,YAGtC,UAAC3C,EAAD,YACE,UAACI,EAAD,YACE,SAAC,MAAD,CAAqBsC,KAAK,OAD5B,aAIA,SAACzC,EAAD,CAAYoB,KAAK,YACjB,SAAChB,EAAD,CAAcgB,KAAK,SAASsB,UAAU,YAGxC,UAACnC,EAAD,CAAYoC,KAAK,SAAjB,WACE,SAAC,MAAD,CAAYF,KAAK,OADnB,qBAOP,C,iHC/FYG,EAAOpD,EAAAA,GAAAA,GAAH,qGAOJqD,EAAOrD,EAAAA,GAAAA,GAAH,mHAOJsD,EAAatD,EAAAA,GAAAA,OAAH,iWAKD,SAAAM,GAAC,OAAIA,EAAEH,MAAMC,OAAOM,WAAnB,IAIC,SAAAJ,GAAC,OAAIA,EAAEH,MAAMC,OAAOC,UAAnB,IAGL,SAAAC,GAAC,OAAIA,EAAEH,MAAMC,OAAOC,UAAnB,IAQRkD,EAAOvD,EAAAA,GAAAA,EAAH,+C,0DClCJwD,EAAS,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACvB,OACE,SAAC,KAAD,CACEC,QAASD,EACTE,OAAO,KACPC,MAAM,KACNC,UAAU,cACVC,aAAc,CACZC,QAAS,QACTC,UAAW,MACXC,WAAY,OACZC,YAAa,SAIpB,ECLYC,EAAc,WAEzB,IAAMC,GAAkBhC,EAAAA,EAAAA,IAAYiC,EAAAA,IAC9BZ,GAAYrB,EAAAA,EAAAA,IAAYkC,EAAAA,IACxBxD,GAAQsB,EAAAA,EAAAA,IAAYmC,EAAAA,IAGpBtC,GAAWC,EAAAA,EAAAA,OAEjBsC,EAAAA,EAAAA,YAAU,WACRvC,GAASwC,EAAAA,EAAAA,MACV,GAAE,CAACxC,IAIJ,OACE,iCAEE,SAACuB,EAAD,CAAQC,UAAWA,KAEnB,SAACL,EAAD,UACGgB,EAAgBM,KAAI,SAAAC,GAAI,OACvB,UAACtB,EAAD,YACE,0BAAOsB,EAAK/C,QACZ,0BAAO+C,EAAK5C,UACZ,SAACuB,EAAD,CAAYsB,QAAS,kBAZZC,EAY6BF,EAAKG,GAZrB7C,GAAS8C,EAAAA,EAAAA,IAAcF,IAApC,IAAAA,CAYY,EAArB,UACE,SAAC,MAAD,CAAa5B,KAAK,WAJX0B,EAAKG,GADO,MAYC,IAA3BV,EAAgBY,SACf,SAACzB,EAAD,8DAIDzC,IAAS,SAACyC,EAAD,UAAOzC,MAGtB,C,uGCnDYmE,EAAQjF,EAAAA,GAAAA,MAAH,0KAKgB,SAAAE,GAAK,OAAIA,EAAMC,MAAMC,OAAOM,WAAvB,IACb,SAAAR,GAAK,OAAIA,EAAMC,MAAMC,OAAOM,WAAvB,IAGlBwE,EAAclF,EAAAA,GAAAA,MAAH,8JAMb,SAAAE,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,UAAvB,I,uCCXH8E,EAAS,WAEpB,IAAMC,GAAchD,EAAAA,EAAAA,IAAYiD,EAAAA,IAE1BpD,GAAWC,EAAAA,EAAAA,MAMjB,OACE,UAACgD,EAAD,YACE,SAAC,MAAD,CAAgBjC,KAAK,QACrB,SAACgC,EAAD,CACE9B,KAAK,OACLvB,KAAK,SACL0D,MAAOF,EACPG,SAXe,SAAAC,GACnBvD,GAASwD,EAAAA,EAAAA,GAAUD,EAAEE,cAAcJ,OACpC,EAUKK,YAAY,4BAInB,C,gGC1BYC,E,QAAQ5F,GAAAA,GAAH,uE,SCEL6F,EAAe,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC7B,OAAO,SAACF,EAAD,UAAQE,GAChB,C,2CCNO9D,EAAgB+D,EAAQ,KAAxB/D,YACAmC,EAAgB4B,EAAQ,MAAxB5B,YACAgB,EAAWY,EAAQ,KAAnBZ,OACAU,EAAiBE,EAAQ,MAAzBF,aACAG,EAAmBD,EAAQ,MAA3BC,eAkBR,UAhBqB,WACnB,OACE,iCACE,SAACH,EAAD,CAAcC,MAAM,eACpB,SAAC9D,EAAD,KAEA,SAAC6D,EAAD,CAAcC,MAAM,cACpB,SAACX,EAAD,KAEA,SAAChB,EAAD,KAEA,SAAC6B,EAAD,MAGL,C,sKCfY3D,EAAiB,SAAA4D,GAAK,OAAIA,EAAM9D,SAAS+D,KAAnB,EACtBb,EAAe,SAAAY,GAAK,OAAIA,EAAME,MAAV,EACpB7B,EAAkB,SAAA2B,GAAK,OAAIA,EAAM9D,SAASsB,SAAnB,EACvBc,EAAc,SAAA0B,GAAK,OAAIA,EAAM9D,SAASrB,KAAnB,EAUnBuD,GAAwB+B,EAAAA,EAAAA,IACnC,CAAC/D,EAAgBgD,IACjB,SAAClD,EAAUgE,GACT,IAAME,EAAkBF,EAAOtD,oBAQ/B,OAPqB,OAAGV,QAAH,IAAGA,OAAH,EAAGA,EACpBgE,QAAO,SAAAvD,GAAO,oBACdA,QADc,IACdA,GADc,UACdA,EAAShB,YADK,aACd,EAAeiB,oBAAoByD,SAASD,EAD9B,IAGfE,MAAK,SAACC,EAAWC,GAAZ,OACJD,EAAU5E,KAAK8E,cAAcD,EAAW7E,KADpC,GAIT,G","sources":["components/ContactForm/ContactForm.styled.jsx","components/Notification/Notification.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/Loader/Loader.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Title/Title.styled.jsx","components/Title/Title.jsx","pages/ContactsPage.jsx","redux/selectors.js"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  Form as FormikForm,\n  ErrorMessage as FormikErrorMessage,\n  Field,\n} from 'formik';\n\nexport const Form = styled(FormikForm)`\n  width: 390px;\n  padding: 20px;\n  margin-bottom: 30px;\n  border: 1px solid ${props => props.theme.colors.accentDark};\n  border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  box-shadow: -1px -1px 5px #fff, 1px 1px 5px ${p => p.theme.colors.accentDark};\n`;\n\nexport const FormField = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const FieldInput = styled(Field)`\n  padding: 10px;\n  border: none;\n  border-radius: 5px;\n  box-shadow: inset 1px 1px 3px ${props => props.theme.colors.accentLight},\n    inset -1px -1px 5px ${props => props.theme.colors.accentLight};\n`;\n\nexport const LabelWrapper = styled.div`\n  display: flex;\n  gap: 8px;\n  margin-left: 8px;\n  margin-bottom: 5px;\n`;\n\nexport const ErrorMessage = styled(FormikErrorMessage)`\n  font-size: 12px;\n  font-style: italic;\n  color: ${props => props.theme.colors.error};\n`;\n\nexport const FormBtnAdd = styled.button`\n  width: 200px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n  padding: 5px;\n  margin-left: auto;\n  margin-right: auto;\n  border-radius: 5px;\n  border: none;\n  background-color: ${p => p.theme.colors.accentLight};\n  transition: all 0.2s ease-in-out;\n  :hover,\n  :focus {\n    background-color: ${p => p.theme.colors.accentDark};\n    color: #fff;\n    box-shadow: -2px -2px 5px #fff,\n      2px 2px 5px ${p => p.theme.colors.accentDark};\n    svg {\n      fill: #fff;\n      stroke: #fff;\n    }\n  }\n`;\n","export const notificationMassege = 'is already in contacts!';\nexport const notificationOptions = {\n  position: 'top-center',\n  autoClose: 5000,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n  progress: undefined,\n  theme: 'dark',\n};\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { FaUserPlus, FaUser } from 'react-icons/fa';\nimport { BsFillTelephoneFill } from 'react-icons/bs';\nimport {\n  FormField,\n  Form,\n  ErrorMessage,\n  FormBtnAdd,\n  LabelWrapper,\n  FieldInput,\n} from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport {\n  notificationMassege,\n  notificationOptions,\n} from 'components/Notification/Notification';\nimport { toast } from 'react-toastify';\nimport { addContact } from 'redux/operations';\n\n// валідація полів форми\nconst ContactSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz... '\n    )\n    .required(),\n  number: Yup.string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n\nexport const ContactForm = () => {\n  // Для того щоб сповістити сторінку про те, що в інтерфейсі відбулася якась подія, необхідно відправити екшен. Для цього у бібліотеці React Redux є хук useDispatch(), який повертає посилання на функцію надсилання екшенів dispatch з об'єкта створеного нами раніше стора Redux.\n  const dispatch = useDispatch();\n  // Отримуємо необхідну частину стану зі стору\n  const contacts = useSelector(selectContacts);\n\n  // console.log(selectContacts);\n\n  return (\n    <Formik\n      // дивись документацію\n      initialValues={{ name: '', number: '' }}\n      validationSchema={ContactSchema}\n      onSubmit={(values, actions) => {\n        // перевірка на існуюче ім'я контакту\n        if (\n          contacts.some(\n            contact =>\n              contact.name.toLocaleLowerCase() ===\n              values.name.toLocaleLowerCase()\n          )\n        ) {\n          // повідомлення\n          toast.error(\n            `${values.name} ${notificationMassege}`,\n            notificationOptions\n          );\n          return;\n        }\n        dispatch(addContact({ ...values }));\n        // console.log(values);\n        actions.resetForm();\n      }}\n    >\n      <Form>\n        <FormField>\n          <LabelWrapper>\n            <FaUser size=\"16\" />\n            Name\n          </LabelWrapper>\n          <FieldInput name=\"name\" />\n          <ErrorMessage name=\"name\" component=\"div\" />\n        </FormField>\n\n        <FormField>\n          <LabelWrapper>\n            <BsFillTelephoneFill size=\"16\" />\n            Number\n          </LabelWrapper>\n          <FieldInput name=\"number\" />\n          <ErrorMessage name=\"number\" component=\"div\" />\n        </FormField>\n\n        <FormBtnAdd type=\"submit\">\n          <FaUserPlus size=\"16\" />\n          Add contact\n        </FormBtnAdd>\n      </Form>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  padding: 10px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 16px;\n`;\n\nexport const ListBtnDel = styled.button`\n  width: 30px;\n  padding: 3px;\n  border-radius: 5px;\n  border: none;\n  background-color: ${p => p.theme.colors.accentLight};\n  transition: all 0.2s ease-in-out;\n  :hover,\n  :focus {\n    background-color: ${p => p.theme.colors.accentDark};\n    color: #fff;\n    box-shadow: -2px -2px 5px #fff,\n      2px 2px 5px ${p => p.theme.colors.accentDark};\n    svg {\n      fill: #fff;\n      stroke: #fff;\n    }\n  }\n`;\n\nexport const Text = styled.p`\n  text-align: center;\n`;\n","import { Dna } from 'react-loader-spinner';\n\nexport const Loader = ({ isLoading }) => {\n  return (\n    <Dna\n      visible={isLoading}\n      height=\"80\"\n      width=\"80\"\n      ariaLabel=\"dna-loading\"\n      wrapperStyle={{\n        display: 'block',\n        marginTop: '5px',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n      }}\n    />\n  );\n};\n","import { FaUserMinus } from 'react-icons/fa';\nimport { Item, List, ListBtnDel, Text } from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectError,\n  selectIsLoading,\n  selectvisibleContacts,\n} from 'redux/selectors';\nimport { useEffect } from 'react';\nimport { deleteContact, fetchContacts } from 'redux/operations';\nimport { Loader } from 'components/Loader/Loader';\n\nexport const ContactList = () => {\n  // Отримуємо необхідну частину стану зі стору\n  const visibleContacts = useSelector(selectvisibleContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  // Для того щоб сповістити сторінку про те, що в інтерфейсі відбулася якась подія, необхідно відправити екшен.\n  // Екшени - це об'єкти, які передають дані з компонентів у стор, тим самим сигналізуючи про те, яка подія сталася в інтерфейсі. Вони являються єдиним джерелом інформації для стору.\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const delContact = contactId => dispatch(deleteContact(contactId));\n\n  return (\n    <>\n      {/* спінер */}\n      <Loader isLoading={isLoading} />\n\n      <List>\n        {visibleContacts.map(item => (\n          <Item key={item.id}>\n            <span>{item.name}</span>\n            <span>{item.number}</span>\n            <ListBtnDel onClick={() => delContact(item.id)}>\n              <FaUserMinus size=\"16\" />\n            </ListBtnDel>\n          </Item>\n        ))}\n      </List>\n\n      {/* якщо нема контактів */}\n      {visibleContacts.length === 0 && (\n        <Text>Sorry, there are no contacts in your PhoneBook.</Text>\n      )}\n\n      {/* помилка запиту */}\n      {error && <Text>{error}</Text>}\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  margin-left: 5px;\n  padding: 5px;\n  border: none;\n  border-radius: 5px;\n  box-shadow: inset 1px 1px 3px ${props => props.theme.colors.accentLight},\n    inset -1px -1px 5px ${props => props.theme.colors.accentLight};\n`;\n\nexport const SearchField = styled.label`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 10px;\n  /* font-size: 14px; */\n  color: ${props => props.theme.colors.accentDark}; ;\n`;\n","import { MdPersonSearch } from 'react-icons/md';\nimport { Input, SearchField } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/selectors';\nimport { setFilter } from 'redux/filterSlice';\n\nexport const Filter = () => {\n  // Отримуємо необхідну частину стану зі стору\n  const filterValue = useSelector(selectFilter);\n  // Для того щоб сповістити сторінку про те, що в інтерфейсі відбулася якась подія, необхідно відправити екшен.\n  const dispatch = useDispatch();\n\n  const changeFilter = e => {\n    dispatch(setFilter(e.currentTarget.value));\n  };\n\n  return (\n    <SearchField>\n      <MdPersonSearch size=\"22\" />\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        value={filterValue}\n        onChange={changeFilter}\n        placeholder=\"Find contacts by name\"\n      />\n    </SearchField>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Title = styled.h2`\n  margin-bottom: 10px;\n  text-align: center;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Title } from './Title.styled';\n\nexport const SectionTitle = ({ title }) => {\n  return <Title>{title}</Title>;\n};\n\nSectionTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","const { ContactForm } = require('components/ContactForm/ContactForm');\nconst { ContactList } = require('components/ContactList/ContactList');\nconst { Filter } = require('components/Filter/Filter');\nconst { SectionTitle } = require('components/Title/Title');\nconst { ToastContainer } = require('react-toastify');\n\nconst ContactsPage = () => {\n  return (\n    <>\n      <SectionTitle title=\"Phonebook\" />\n      <ContactForm />\n\n      <SectionTitle title=\"Contacts\" />\n      <Filter />\n\n      <ContactList />\n\n      <ToastContainer />\n    </>\n  );\n};\n\nexport default ContactsPage;\n","// Один і той же селектор може використовуватися в декількох місцях програми, що призводить до дублювання коду. Щоб уникнути цього та ще більше структурувати код, всі функції-селектори оголошуються в окремому файлі, після чого імпортуються до компонентів.\n\nimport { createSelector } from '@reduxjs/toolkit';\n\n// змінні для необхідних частин стану, щоб отримати дані зі стору через хук useSelector(selector)\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\n// У компоненті списку ContactList у нас є код обчислення під поточну умову фільтрації. Приховаємо від компонента логіку обчислення відфільтрованого списку контактів.\n// ми використовуємо інші селектори всередині селектора selectvisibleContacts, щоб одержати необхідні частини стану для наступних обчислень.\n\n// Процес оптимізації селекторів називається мемоізація - збереження результатів виконання функції для запобігання повторним обчисленням.\n// Для мемоізації селектора використовується функція createSelector, яка приймає масив селекторів, значення яких необхідні для наступних обчислень та функцію перетворювач, в якій виконуватимуться всі обчислення.\n// У масиві селекторів можуть бути будь-які інші селектори, як атомарні так і складові, у тому числі мемоізовані.\n// Результати вхідних селекторів передаються як аргументи функції перетворення в тому самому порядку, в якому вони перераховані.\n// Повторні обчислення виконуються лише якщо зміниться значення якогось параметра, в іншому випадку повертається результат останнього виклика функції.\nexport const selectvisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const normalizeFilter = filter.toLocaleLowerCase();\n    const visibleContacts = contacts\n      ?.filter(contact =>\n        contact?.name?.toLocaleLowerCase().includes(normalizeFilter)\n      )\n      .sort((firstName, secondName) =>\n        firstName.name.localeCompare(secondName.name)\n      );\n    return visibleContacts;\n  }\n);\n"],"names":["Form","styled","FormikForm","props","theme","colors","accentDark","p","FormField","FieldInput","Field","accentLight","LabelWrapper","ErrorMessage","FormikErrorMessage","error","FormBtnAdd","notificationOptions","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","ContactSchema","Yup","shape","name","matches","required","number","ContactForm","dispatch","useDispatch","contacts","useSelector","selectContacts","initialValues","validationSchema","onSubmit","values","actions","some","contact","toLocaleLowerCase","toast","addContact","resetForm","size","component","type","List","Item","ListBtnDel","Text","Loader","isLoading","visible","height","width","ariaLabel","wrapperStyle","display","marginTop","marginLeft","marginRight","ContactList","visibleContacts","selectvisibleContacts","selectIsLoading","selectError","useEffect","fetchContacts","map","item","onClick","contactId","id","deleteContact","length","Input","SearchField","Filter","filterValue","selectFilter","value","onChange","e","setFilter","currentTarget","placeholder","Title","SectionTitle","title","require","ToastContainer","state","items","filter","createSelector","normalizeFilter","includes","sort","firstName","secondName","localeCompare"],"sourceRoot":""}